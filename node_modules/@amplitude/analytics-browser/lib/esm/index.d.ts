export { createInstance } from './browser-client-factory';
export declare const add: (plugin: PluginType<BrowserClientType, BrowserConfigType>) => AmplitudeReturnType<void>, extendSession: () => void, flush: () => AmplitudeReturnType<void>, getDeviceId: () => string | undefined, getSessionId: () => number | undefined, getUserId: () => string | undefined, groupIdentify: (groupType: string, groupName: string | string[], identify: IIdentifyType, eventOptions?: EventOptionsType | undefined) => AmplitudeReturnType<ResultType>, identify: (identify: IIdentifyType, eventOptions?: EventOptionsType | undefined) => AmplitudeReturnType<ResultType>, init: {
    (apiKey: string, options?: BrowserOptionsType | undefined): AmplitudeReturnType<void>;
    (apiKey: string, userId?: string | undefined, options?: BrowserOptionsType | undefined): AmplitudeReturnType<void>;
}, logEvent: (eventInput: string | BaseEventType, eventProperties?: Record<string, any> | undefined, eventOptions?: EventOptionsType | undefined) => AmplitudeReturnType<ResultType>, remove: (pluginName: string) => AmplitudeReturnType<void>, reset: () => void, revenue: (revenue: IRevenueType, eventOptions?: EventOptionsType | undefined) => AmplitudeReturnType<ResultType>, setDeviceId: (deviceId: string) => void, setGroup: (groupType: string, groupName: string | string[], eventOptions?: EventOptionsType | undefined) => AmplitudeReturnType<ResultType>, setOptOut: (optOut: boolean) => void, setSessionId: (sessionId: number) => void, setTransport: (transport: TransportTypeType) => void, setUserId: (userId: string | undefined) => void, track: (eventInput: string | BaseEventType, eventProperties?: Record<string, any> | undefined, eventOptions?: EventOptionsType | undefined) => AmplitudeReturnType<ResultType>;
export { AmplitudeBrowser } from './browser-client';
export { runQueuedFunctions } from './utils/snippet-helper';
export { Revenue, Identify } from '@amplitude/analytics-core';
import { AmplitudeReturn as AmplitudeReturnType, BaseEvent as BaseEventType, EventOptions as EventOptionsType, BrowserClient as BrowserClientType, AttributionOptions as AttributionOptionsType, AutocaptureOptions as AutocaptureOptionsType, BrowserOptions as BrowserOptionsType, BrowserConfig as BrowserConfigType, IConfig as IConfigType, Event as EventType, IdentifyEvent as IdentifyEventType, GroupIdentifyEvent as GroupIdentifyEventType, IdentifyOperation as IdentifyOperationType, SpecialEventType as SpecialEventTypeType, IIdentify as IIdentifyType, IRevenue as IRevenueType, RevenueProperty as RevenuePropertyType, ILogger as ILoggerType, LogLevel as LogLevelType, Plugin as PluginType, BeforePlugin as BeforePluginType, EnrichmentPlugin as EnrichmentPluginType, DestinationPlugin as DestinationPluginType, Result as ResultType, ServerZoneType as ServerZoneTypeType, ServerZone as ServerZoneEnum, IdentityStorageType as IdentityStorageTypeType, Storage as StorageTypeType, TransportType as TransportTypeType, Messenger as MessengerType, ElementInteractionsOptions as ElementInteractionsOptionsType, ActionType as ActionTypeType } from '@amplitude/analytics-core';
import { Campaign as CampaignType, CampaignParser as CampaignParserType, ClickIdParameters as ClickIdParametersType, ReferrerParameters as ReferrerParametersType, UTMParameters as UTMParametersType } from './attribution/campaign';
export declare namespace Types {
    type AmplitudeReturn<T> = AmplitudeReturnType<T>;
    type BaseEvent = BaseEventType;
    type EventOptions = EventOptionsType;
    type Campaign = CampaignType;
    type CampaignParser = CampaignParserType;
    type ClickIdParameters = ClickIdParametersType;
    type ReferrerParameters = ReferrerParametersType;
    type UTMParameters = UTMParametersType;
    type BrowserClient = BrowserClientType;
    type AttributionOptions = AttributionOptionsType;
    type AutocaptureOptions = AutocaptureOptionsType;
    type BrowserConfig = BrowserConfigType;
    type BrowserOptions = BrowserOptionsType;
    type Config = IConfigType;
    type Event = EventType;
    type IdentifyEvent = IdentifyEventType;
    type GroupIdentifyEvent = GroupIdentifyEventType;
    const IdentifyOperation: typeof IdentifyOperationType;
    const SpecialEventType: typeof SpecialEventTypeType;
    type Identify = IIdentifyType;
    type Revenue = IRevenueType;
    const RevenueProperty: typeof RevenuePropertyType;
    type Logger = ILoggerType;
    const LogLevel: typeof LogLevelType;
    type Plugin = PluginType;
    type BeforePlugin = BeforePluginType;
    type EnrichmentPlugin = EnrichmentPluginType;
    type DestinationPlugin = DestinationPluginType;
    type Result = ResultType;
    type ServerZoneType = ServerZoneTypeType;
    const ServerZone: typeof ServerZoneEnum;
    type IdentityStorageType = IdentityStorageTypeType;
    type Storage<T> = StorageTypeType<T>;
    type TransportType = TransportTypeType;
    const OfflineDisabled: null;
    type Messenger = MessengerType;
    type ElementInteractionsOptions = ElementInteractionsOptionsType;
    type ActionType = ActionTypeType;
    const DEFAULT_CSS_SELECTOR_ALLOWLIST: string[];
    const DEFAULT_DATA_ATTRIBUTE_PREFIX = "data-amp-track-";
    const DEFAULT_ACTION_CLICK_ALLOWLIST: string[];
}
//# sourceMappingURL=index.d.ts.map